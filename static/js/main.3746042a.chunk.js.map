{"version":3,"sources":["components/Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","username","message","isUser","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessage","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8TAyBeA,G,MArBCC,sBAAW,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,QAE7BC,EAASF,IAAaC,EAAQD,SAEpC,OACI,yBAAKD,IAAKA,EAAKI,UAAS,kBAAaD,GAAU,kBAC3C,kBAACE,EAAA,EAAD,CAAMD,UAAWD,EAAS,oBAAsB,sBAC5C,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAERP,GAAD,UAAcD,EAAQD,UAAY,eAAlC,MALL,IAK4DC,EAAQA,gB,iBCHzES,EAZKC,IAASC,cAAc,CACnCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGAC,Y,yBCkDRC,MAtDf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACRC,EADQ,KACFC,EADE,OAEeF,mBAAS,IAFxB,mBAERG,EAFQ,KAECC,EAFD,OAGgBJ,mBAAS,IAHzB,mBAGRvB,EAHQ,KAGC4B,EAHD,KAwBb,OAnBFC,qBAAU,WACRnB,EAAGoB,WAAW,YAAYC,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAC/DN,EAAWM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIpC,QAAUmC,EAAIE,iBAElE,IACFT,qBAAU,WACRD,EAAYW,OAAO,6BAClB,IAaC,yBAAKpC,UAAU,OACb,+CACA,0BAAMA,UAAU,aAChB,kBAACqC,EAAA,EAAD,CAAarC,UAAU,oBACrB,kBAACsC,EAAA,EAAD,CAAOtC,UAAU,aAAauC,YAAY,qBAAqBC,MAAOnB,EAAOoB,SAAU,SAAAC,GAAK,OAAIpB,EAASoB,EAAMC,OAAOH,UACtH,kBAACI,EAAA,EAAD,CACE5C,UAAU,kBACV6C,UAAWxB,EACXhB,QAAQ,YACRD,MAAM,UACN0C,KAAK,SACLC,QAtBS,SAACL,GAClBA,EAAMM,iBACNzC,EAAGoB,WAAW,YAAYsB,IAAI,CAC5BnD,QAASuB,EACTxB,SAAUA,EACVqD,UAAW1C,IAASU,UAAUiC,WAAWC,oBAE3C9B,EAAS,MAiBD,kBAAC,IAAD,SAIN,kBAAC,IAAD,KAEIC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAGpC,EAAL,EAAKA,QAAL,OACX,kBAAC,EAAD,CAASuD,IAAKnB,EAAIrC,SAAUA,EAAUC,QAASA,UC1CrCwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzE,c","file":"static/js/main.3746042a.chunk.js","sourcesContent":["import React, {forwardRef} from 'react'\r\nimport { Card,CardContent, Typography } from '@material-ui/core'\r\nimport './Message.css'\r\n\r\nconst Message = forwardRef(({username ,message },ref) => {\r\n    \r\n    const isUser = username === message.username;\r\n    \r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\r\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\r\n                <CardContent>\r\n                    <Typography\r\n                        color=\"white\"\r\n                        variant=\"h5\"\r\n                        component=\"h2\"\r\n                    >\r\n                        {!isUser && `${message.username || 'Unknown User'}: `} {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from \"firebase\"\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n        apiKey: \"AIzaSyAKVT_iFW8uyGlmjxeY5nXj6HXpdTJlVGk\",\r\n        authDomain: \"messenger-clone-d9e91.firebaseapp.com\",\r\n        databaseURL: \"https://messenger-clone-d9e91.firebaseio.com\",\r\n        projectId: \"messenger-clone-d9e91\",\r\n        storageBucket: \"messenger-clone-d9e91.appspot.com\",\r\n        messagingSenderId: \"594630385085\",\r\n        appId: \"1:594630385085:web:9887ed39361afec6bf46d4\",\r\n        measurementId: \"G-1CSMR0GNT9\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;","import React, {useState,useEffect}  from 'react';\nimport './App.css';\nimport {Button , FormControl ,Input , InputLabel ,IconButton} from \"@material-ui/core\";\nimport Message from './components/Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction App() {\nconst [input,setInput] = useState('');\nconst [messages,setMessage] = useState([]);\nconst [username,setUsername] = useState('');\n\nuseEffect(()=>{\n  db.collection('messages').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n    setMessage(snapshot.docs.map(doc => ({id: doc.id ,message : doc.data()})))\n  })\n},[])\nuseEffect(() => {\n  setUsername(prompt('Please enter your name'));\n}, [])\n\nconst sendMessage =(event) => {\n  event.preventDefault();\n  db.collection('messages').add({\n    message: input,\n    username: username,\n    timestamp: firebase.firestore.FieldValue.serverTimestamp()\n  })\n  setInput('');\n}\n\n  return (\n    <div className=\"App\">\n      <h1>Programmer Room</h1>\n      <form className=\"app__form\">\n      <FormControl className='app__formControl'>\n        <Input className='app__input' placeholder='Enter a message...' value={input} onChange={event => setInput(event.target.value)}/>\n        <IconButton\n          className='app__iconButton'\n          disabled={!input} \n          variant=\"contained\" \n          color=\"primary\" \n          type=\"submit\" \n          onClick={sendMessage}\n          >\n          <SendIcon/>\n        </IconButton>\n      </FormControl>\n      </form>\n    <FlipMove>\n      {\n        messages.map(({id,message}) =>(\n          <Message key={id} username={username} message={message}/>\n        ))\n      }\n    </FlipMove>\n      \n    </div>\n  );\n}\n\nexport default App;\n        \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}